<h1 id="цель-работы">Цель работы</h1>
<p>Изучить идеологию и применение средств контроля версий.<br />
Освоить умения по работе с git.</p>
<h1 id="задание">Задание</h1>
<ul>
<li>Создать базовую конфигурацию для работы с git.</li>
<li>Создать ключ SSH.</li>
<li>Создать ключ PGP.</li>
<li>Настроить подписи git.</li>
<li>Зарегистрироваться на Github.</li>
<li>Создать локальный каталог для выполнения заданий по предмету.</li>
</ul>
<h1 id="выполнение-лабораторной-работы">Выполнение лабораторной
работы</h1>
<h2 id="установка-программного-обеспечения">Установка программного
обеспечения</h2>
<p>Установим git при помощи команды:<br />
dnf install git<br />
<img src="image/Рис1.png" alt="Рис.1: Установка git" /><br />
Установим gh при помощи команды:<br />
dnf install gh<br />
<img src="image/Рис2.png" alt="Рис.2: Установка gh" /><br />
<img src="image/Рис3.png" alt="Рис.3: Результат установки gh" /></p>
<h2 id="базовая-настройка-git">Базовая настройка git</h2>
<ul>
<li>Зададим имя и email владельца репозитория при помощи следующих
команд:<br />
git config –global user.name “Name Surname”<br />
git config –global user.email “work@mail”</li>
<li>Настроим utf-8 в выводе сообщений git командой:<br />
git config –global core.quotepath false<br />
<img src="image/Рис4.png" alt="Рис.4: Базовая настройка git" /><br />
</li>
<li>Зададим имя начальной ветки (будем называть её master):<br />
git config –global init.defaultBranch master</li>
<li>Параметр autocrlf:<br />
git config –global core.autocrlf input</li>
<li>Параметр safecrlf:<br />
git config –global core.safecrlf warn<br />
<img src="image/Рис5.png"
alt="Рис.5: Окончание базовой настройки git и генерация SSH ключа" /></li>
</ul>
<h2 id="созданиче-ключа-ssh">Созданиче ключа ssh</h2>
<ul>
<li>по алгоритму rsa с ключём размером 4096 бит:<br />
ssh-keygen -t rsa -b 4096<br />
(см. “Рис5”)<br />
</li>
<li>для копирования ключа нам понадобится команда:<br />
cat ~/.ssh/id_rsa.pub<br />
<img src="image/Рис6.png" alt="Рис.6: Копирование SSH ключа" /><br />
</li>
<li>далее добавляем скопированный ключ SSH на GitHub:<br />
<img src="image/Рис7.png"
alt="Рис.7: Форма ввода SSH ключа в настройках GitHub" /></li>
</ul>
<h2 id="создание-ключа-pgp">Создание ключа pgp</h2>
<ul>
<li>Генерируем ключ при помощи команды:<br />
gpg –full-generate-key</li>
<li>Из предложенных опций выбираем:
<ul>
<li>тип RSA and RSA;</li>
<li>размер 4096;</li>
<li>выберите срок действия; значение по умолчанию — 0 (срок действия не
истекает никогда).</li>
</ul></li>
<li>GPG запросит личную информацию, которая сохранится в ключе:
<ul>
<li>Имя (не менее 5 символов).</li>
<li>Адрес электронной почты.
<ul>
<li>При вводе email убедитесь, что он соответствует адресу,
используемому на GitHub.</li>
</ul></li>
<li>Комментарий. Можно ввести что угодно или нажать клавишу ввода, чтобы
оставить это поле пустым.<br />
<img src="image/Рис8.png" alt="Рис.8: Генерация PGP ключа" /><br />
<img src="image/Рис9.png"
alt="Рис.9: Результат генерации PGP ключа" /></li>
</ul></li>
</ul>
<h2 id="добавление-pgp-ключа-в-github">Добавление PGP ключа в
GitHub</h2>
<ul>
<li>Выводим список ключей и копируем отпечаток приватного ключа: gpg
–list-secret-keys –keyid-format LONG</li>
<li>Отпечаток ключа — это последовательность байтов, используемая для
идентификации более длинного, по сравнению с самим отпечатком
ключа.</li>
<li>Формат строки:<br />
sec Алгоритм/Отпечаток_ключа Дата_создания [Флаги] [Годен_до]
ID_ключа<br />
<img src="image/Рис10.png"
alt="Рис.10: Формат строки списка ключей" /><br />
</li>
<li>Cкопируйте ваш сгенерированный PGP ключ в буфер обмена:<br />
gpg –armor –export <PGP Fingerprint> | xclip -sel clip<br />
<img src="image/Рис11.png" alt="Рис.11: Копирование PGP ключа" /><br />
Примечание: я использовала в качестве параметра <PGP Fingerprint> свою
почту, указанную при создании ключа PGP, однако, корректнее было бы
использовать “Отпечаток_ключа” как на “Рис10” - A014F1F727513168.</li>
<li>Перейдите в настройки GitHub (https://github.com/settings/keys),
нажмите на кнопку New GPG key и вставьте полученный ключ в поле
ввода.<br />
<img src="image/Рис13.png"
alt="Рис.13: Форма ввода PGP ключа в настройках GitHub" /></li>
</ul>
<h2 id="настройка-автоматических-подписей-коммитов-git">Настройка
автоматических подписей коммитов git</h2>
<ul>
<li>Используя введёный email, укажите Git применять его при подписи
коммитов:<br />
git config –global user.signingkey <PGP Fingerprint><br />
git config –global commit.gpgsign true<br />
git config –global gpg.program S(which gpg2)<br />
<img src="image/Рис12.png"
alt="Рис.12: Настройка автоматических подписей коммитов git" /></li>
</ul>
<h2 id="настройка-gh">Настройка gh</h2>
<ul>
<li>Для начала необходимо авторизоваться<br />
gh auth login</li>
<li>Утилита задаст несколько наводящих вопросов.<br />
<img src="image/Рис14.png"
alt="Рис.14: Вопросы при авторизации gh" /><br />
</li>
<li>Авторизоваться можно через браузер.<br />
<img src="image/Рис15.png"
alt="Рис.15: Авторизация gh при помощи браузера" /><br />
<img src="image/Рис16.png"
alt="Рис.16: Результат авторизации gh при помощи браузера" /><br />
</li>
<li>Результат выполнения корректной работы по настройке gh:<br />
<img src="image/Рис17.png"
alt="Рис.17: Результат выполнения корректной работы по настройке gh" /></li>
</ul>
<h2 id="сознание-репозитория-курса-на-основе-шаблона">Сознание
репозитория курса на основе шаблона</h2>
<ul>
<li>Необходимо создать шаблон рабочего пространства (см. Рабочее
пространство для лабораторной работы).</li>
<li>Например, для 2022–2023 учебного года и предмета «Операционные
системы» (код предмета os-intro) создание репозитория примет следующий
вид:<br />
mkdir -p ~/work/study/2022-2023/“Операционные системы”<br />
cd ~/work/study/2022-2023/“Операционные системы” gh repo create
study_2022-2023_os-intro
–template=yamadharma/course-directory-student-template –public<br />
git clone –recursive git@github.com:<owner>/study_2022-2023_os-intro.git
os-intro<br />
<img src="image/Рис18.png"
alt="Рис.18: Сознание репозитория курса на основе шаблона" /><br />
<img src="image/Рис19.png"
alt="Рис.19: Результат клонирования репозитория курса на основе шаблона" /></li>
</ul>
<h2 id="настройка-каталога-курса">Настройка каталога курса</h2>
<ul>
<li>Перейдите в каталог курса:<br />
cd ~/work/study/2022-2023/“Операционные системы”/os-intro</li>
<li>Удалите лишние файлы:<br />
rm package.json</li>
<li>Создайте необходимые каталоги:<br />
echo os-intro &gt; COURSE<br />
make<br />
<img src="image/Рис20.png"
alt="Рис.20: Настройка каталога курса" /><br />
</li>
<li>Отправьте файлы на сервер:<br />
git add .<br />
git commit -am ‘feat(main): make course structure’<br />
git push<br />
<img src="image/Рис21.png"
alt="Рис.21: Результат отправки файлов на сервер GitHub" /><br />
Примечание: если при коммите выводит ошибку как на “Рис21”, может помочь
команда<br />
export GPG_TTY=$(tty)</li>
</ul>
<h1 id="контрольные-вопросы">Контрольные вопросы</h1>
<ol type="1">
<li><strong>Что такое системы контроля версий (VCS) и для решения каких
задач они предназначаются?</strong><br />
Это программное обеспечение для облегчения работы с изменяющейся
информацией. VCS позволяет хранить несколько версий одного и того же
документа, при необходимости возвращаться к более ранним версиям,
определять, кто и когда сделал то или иное изменение, и многое
другое.</li>
<li><strong>Объясните следующие понятия VCS и их отношения: хранилище,
commit, история, рабочая копия.</strong><br />
Хранилище (repository), или репозитарий, — место хранения всех версий и
служебной информации.<br />
Commit («[трудовой] вклад», не переводится) — синоним версии; процесс
создания новой версии.<br />
История – место, где сохраняются все коммиты, по которым можно
посмотреть данные о коммитах.<br />
Рабочая копия – текущее состояние файлов проекта, основанное на версии,
загруженной из хранилища.</li>
<li><strong>Что представляют собой и чем отличаются централизованные и
децентрализованные VCS? Приведите примеры VCS каждого
вида.</strong><br />
Централизованные VCS: одно основное хранилище всего проекта и каждый
пользователь копирует себе необходимые ему файлы из этого репозитория,
изменяет и, затем, добавляет свои изменения обратно. Например: CVS
(Concurrent Versions System, Система одновременных версий), Subversion
(SVN).<br />
Децентрализованные VCS: у каждого пользователя свой вариант (возможно не
один) репозитория. Например: Git и Mercurial.</li>
<li><strong>Опишите действия с VCS при единоличной работе с
хранилищем.</strong></li>
</ol>
<ul>
<li>Инициализация репозитория: Создайте новый репозиторий VCS для вашего
проекта. В большинстве систем управления версиями это делается командой
“init” или подобной.</li>
<li>Добавление файлов: Добавьте все файлы вашего проекта в репозиторий.
Это позволяет начать отслеживать изменения в ваших файлах.</li>
<li>Создание коммитов: После внесения изменений в файлы сделайте
коммиты, чтобы сохранить текущее состояние в репозитории. Коммиты могут
включать описание ваших изменений.</li>
<li>Откат к предыдущим версиям: Если вы сделали изменения, которые вы
хотите откатить, VCS позволяет вам вернуться к предыдущим версиям файлов
или к более старым коммитам.</li>
<li>Просмотр истории: VCS сохраняет историю всех ваших коммитов. Вы
можете просматривать историю, смотреть, какие изменения были внесены в
каждом коммите.</li>
<li>Ветвление и слияние: В случае необходимости, вы можете создавать
ветки (branches) для разработки разных функций или экспериментов. Вы
также можете сливать ветки, чтобы объединить изменения из разных
веток.</li>
<li>Работа с удаленным репозиторием: Даже при индивидуальной работе с
VCS, вы можете создать удаленный репозиторий (например, на платформе
GitHub или GitLab) для резервного копирования и совместного доступа к
своему коду с разных устройств.</li>
<li>Резервное копирование: Регулярно отправляйте свои изменения на
удаленный репозиторий или делайте резервное копирование локальных
репозиториев для предотвращения потери данных.</li>
</ul>
<ol start="5" type="1">
<li><strong>Опишите порядок работы с общим хранилищем VCS.</strong></li>
</ol>
<ul>
<li>Выбор VCS и настройка: В начале проекта выберите VCS, который лучше
всего соответствует вашим потребностям. Популярными системами управления
версиями являются Git, SVN, Mercurial, и другие. Установите и настройте
выбранную систему на вашем компьютере.</li>
<li>Инициализация репозитория: Создайте новый репозиторий (хранилище)
VCS для вашего проекта. Это можно сделать с помощью команды init или
аналогичной в зависимости от выбранной системы.</li>
<li>Добавление файлов: Добавьте все файлы вашего проекта в локальный
репозиторий. В Git, это делается с помощью команды git add, в SVN -
команды svn add, и так далее.</li>
<li>Создание коммитов: После добавления файлов, создайте коммиты
(snapshots) для сохранения текущего состояния вашего проекта в локальном
репозитории. Коммиты должны сопровождаться описанием ваших изменений. В
Git, коммиты создаются с помощью команды git commit, в SVN - svn
commit.</li>
<li>Работа с удаленным репозиторием: Если у вас есть общий проект с
другими разработчиками, существует удаленный репозиторий на сервере. Вы
можете клонировать (создать локальную копию) этого удаленного
репозитория с помощью команды git clone, svn checkout, и других в
зависимости от системы VCS.</li>
<li>Работа над проектом: Вы и другие разработчики можете работать над
проектом, внося изменения в файлы в вашей локальной копии. По мере
работы, регулярно создавайте коммиты, чтобы сохранить изменения в вашем
локальном репозитории.</li>
<li>Отправка изменений: Когда вы готовы поделиться своими изменениями с
другими участниками проекта, отправьте их на удаленный репозиторий с
помощью команды git push, svn commit, или аналогичных команд в других
системах.</li>
<li>Обновление локальной копии: Для получения изменений, внесенных
другими участниками проекта, используйте команду обновления (git pull,
svn update и др.).</li>
<li>Работа с ветками: При необходимости, создавайте и работайте с
ветками (branches) для разработки разных функций. Ветвление и слияние
(merge) - важные аспекты работы с VCS.</li>
<li>Решение конфликтов: Если возникают конфликты при слиянии изменений,
решайте их вручную и сохраняйте изменения в конфликтных файлах.</li>
<li>Отслеживание истории: VCS сохраняет историю всех изменений в
проекте. Вы можете просматривать историю, анализировать изменения и
возвращаться к предыдущим версиям при необходимости.</li>
<li>Резервное копирование: Регулярно сохраняйте резервные копии вашего
локального репозитория и удаленного репозитория, чтобы избежать потери
данных.</li>
</ul>
<ol start="6" type="1">
<li><strong>Каковы основные задачи, решаемые инструментальным средством
git?</strong><br />
Git — это система управления версиями. У Git две основных задачи:</li>
</ol>
<ul>
<li>хранить информацию о всех изменениях в вашем коде, начиная с самой
первой строчки</li>
<li>обеспечение удобства командной работы над кодом.</li>
</ul>
<ol start="7" type="1">
<li><strong>Назовите и дайте краткую характеристику командам
git.</strong></li>
</ol>
<ul>
<li>Создание основного дерева репозитория:<br />
git init</li>
<li>Получение обновлений (изменений) текущего дерева из центрального
репозитория:<br />
git pull</li>
<li>Отправка всех произведённых изменений локального дерева в
центральный репозиторий:<br />
git push</li>
<li>Просмотр списка изменённых файлов в текущей директории:<br />
git status</li>
<li>Просмотр текущих изменений:<br />
git diff</li>
<li>Сохранение текущих изменений:
<ul>
<li>добавить все изменённые и/или созданные файлы и/или каталоги:<br />
git add .</li>
<li>добавить конкретные изменённые и/или созданные файлы и/или
каталоги:<br />
git add имена_файлов</li>
<li>удалить файл и/или каталог из индекса репозитория (при этом файл
и/или каталог остаётся в локальной директории):<br />
git rm имена_файлов</li>
</ul></li>
<li>Сохранение добавленных изменений:
<ul>
<li>сохранить все добавленные изменения и все изменённые файлы:<br />
git commit -am ‘Описание коммита’</li>
<li>сохранить добавленные изменения с внесением комментария через
встроенный редактор:<br />
git commit</li>
<li>создание новой ветки, базирующейся на текущей:<br />
git checkout -b имя_ветки</li>
<li>переключение на некоторую ветку:<br />
git checkout имя_ветки
<ul>
<li>(при переключении на ветку, которой ещё нет в локальном репозитории,
она будет создана и связана с удалённой)</li>
</ul></li>
<li>отправка изменений конкретной ветки в центральный репозиторий:<br />
git push origin имя_ветки</li>
<li>слияние ветки с текущим деревом:<br />
git merge –no-ff имя_ветки</li>
</ul></li>
<li>Удаление ветки:
<ul>
<li>удаление локальной уже слитой с основным деревом ветки:<br />
git branch -d имя_ветки</li>
<li>принудительное удаление локальной ветки:<br />
git branch -D имя_ветки</li>
<li>удаление ветки с центрального репозитория:<br />
git push origin :имя_ветки</li>
</ul></li>
</ul>
<ol start="8" type="1">
<li><strong>Приведите примеры использования при работе с локальным и
удалённым репозиториями.</strong><br />
Работа с локальным репозиторием:</li>
</ol>
<ul>
<li>git init: Инициализация нового локального репозитория.</li>
<li>git clone <URL>: Клонирование удаленного репозитория в локальную
директорию.</li>
<li>git status: Показ текущего состояния локального репозитория, включая
измененные, добавленные и неотслеживаемые файлы.</li>
<li>git add <file>: Добавление файла в индекс, подготовка к
коммиту.</li>
<li>git commit -m “Сообщение коммита”: Создание коммита с сообщением,
описывающим внесенные изменения.</li>
<li>git log: Просмотр истории коммитов в локальном репозитории.</li>
<li>git branch: Просмотр списка веток в репозитории.</li>
<li>git checkout <branch>: Переключение на другую ветку.</li>
<li>git merge <branch>: Слияние изменений из указанной ветки в
текущую.</li>
<li>git reset <commit>: Откат на определенный коммит, отмена
изменений.<br />
Работа с удаленным репозиторием:</li>
<li>git remote -v: Просмотр списка удаленных репозиториев, связанных с
текущим локальным репозиторием.</li>
<li>git pull <remote> <branch>: Получение изменений с удаленного
репозитория и объединение их с текущей веткой.</li>
<li>git push <remote> <branch>: Отправка своих локальных изменений на
удаленный репозиторий.</li>
<li>git fetch <remote>: Получение информации о состоянии удаленного
репозитория без слияния изменений.</li>
<li>git clone <URL>: Клонирование удаленного репозитория в локальную
директорию.</li>
</ul>
<ol start="9" type="1">
<li><strong>Что такое и зачем могут быть нужны ветви
(branches)?</strong><br />
Ветки нужны, чтобы несколько программистов могли вести работу над одним
и тем же проектом или даже файлом одновременно, при этом не мешая друг
другу. Кроме того, ветки используются для тестирования экспериментальных
функций: чтобы не повредить основному проекту, создается новая ветка
специально для экспериментов.</li>
<li><strong>Как и зачем можно игнорировать некоторые файлы при
commit?</strong><br />
Игнорируемые файлы — это, как правило, артефакты сборки и файлы,
генерируемые машиной из исходных файлов в вашем репозитории, либо файлы,
которые по какой-либо иной причине не должны попадать в коммиты.</li>
</ol>
<h1 id="выводы">Выводы</h1>
<p>В ходе выполнения лабораторной работы я изучила идеологию и
применение средств контроля версий, а также освоила умения по работе с
git.</p>
